import { Myheader } from "../components/myheader/myheader";
import style from '../style/Page.module.css'

function Auth() {
    return (
      <div className="App">
       <Myheader logo='Courses' href='http://localhost:3000/' isauht={true}></Myheader>
       <div className={style.divcurs}>

        <p className={style.textcurs}>
        C# (произносится как "си шарп") — современный объектно-ориентированный и типобезопасный язык программирования. C# позволяет разработчикам создавать разные типы безопасных и надежных приложений, выполняющихся в .NET. C# относится к широко известному семейству языков C, и покажется хорошо знакомым любому, кто работал с C, C++, Java или JavaScript. Здесь представлен обзор основных компонентов языка C# 8 и более ранних версий. Если вы хотите изучить язык с помощью интерактивных примеров, рекомендуем поработать с вводными руководствами по C#.
        </p>
        <a className={style.link} href="https://learn.microsoft.com/ru-ru/dotnet/csharp/tour-of-csharp/">
        Начало
        </a>
        
        <p className={style.textcurs}>
        C# является объектно-ориентированным языком, а значит поддерживает инкапсуляцию, наследование и полиморфизм. Класс наследуется непосредственно из одного родительского класса. Он может реализовывать любое число интерфейсов. Методы, которые переопределяют виртуальные методы родительского класса, должны содержать ключевое слово override, чтобы исключить случайное переопределение. В языке C# структура похожа на облегченный класс: это тип, распределяемый в стеке и реализующий интерфейсы, но не поддерживающий наследование. C# предоставляет record class типы и record struct , которые представляют собой типы, цель которых заключается в основном в хранении значений данных.
        </p>
        <a className={style.link} href="https://learn.microsoft.com/ru-ru/dotnet/csharp/tour-of-csharp/types">
         Типы
        </a>
        
        <p className={style.textcurs}>
        Члены class могут быть статическими членами или членами экземпляра. Статические члены принадлежат классу в целом, а члены экземпляра принадлежат конкретным объектам (экземплярам классов).

Ниже перечислены виды членов, которые могут содержаться в классе.

Константы: константы, связанные с классом
Поля. Переменные, связанные с классом.
Методы: действия, которые могут выполняться классом
Свойства: действия, связанные с чтением и записью именованных свойств класса
Индексаторы: действия, связанные с экземплярами индексирования класса, например массива
События: уведомления, которые могут быть созданы классом
Операторы: операторы преобразования и выражения, поддерживаемые классом
Конструкторы: действия, необходимые для инициализации экземпляров класса или самого класса
Методы завершения: действия, выполняемые перед окончательным удалением экземпляров класса.
Типы: вложенные типы, объявленные классом
        </p>
        <a className={style.link} href="/">
         стандартные блоки
        </a>
        
        <p className={style.textcurs}>
        Основные языковые области C#,Массивы, коллекции и LINQВ C# и .NET имеется множество различных типов коллекций. Синтаксис массивов определяется языком. Универсальные типы коллекций перечислены в пространстве имен System.Collections.Generic. К специализированнымколлекциям относятся System.Span для доступа к непрерывной памяти в кадре стека и System.Memory для доступа к непрерывной памяти в управляемой куче. Все коллекции, включая массивы, Span и Memory,используют общий принцип итерации. Используется интерфейс System.Collections.Generic.IEnumerable. Этот единый принцип означает, что любой из типов коллекций можно использовать с запросами LINQ или другими алгоритмами. Методы пишутся с помощью IEnumerable, и алгоритмы работают с любой коллекцией.
        </p>
        <a className={style.link} href="https://learn.microsoft.com/ru-ru/dotnet/csharp/tour-of-csharp/features">
         области языка
        </a>
        
        <p className={style.textcurs}>
        Мы будем продолжать развивать C# в соответствии с меняющимися потребностями разработчиков и оставаться самым новым языком программирования. Мы будем активно и широко внедрять инновации в сотрудничестве с командами, отвечающими за библиотеки .NET, средства разработчика и поддержку рабочих нагрузок, при этом соблюдая осторожность, чтобы оставаться в духе языка. Учитывая разнообразие доменов, в которых используется C#, мы отдадим предпочтение улучшению языка и производительности, которые приносят пользу всем или большинству разработчиков, и сохраняем высокую приверженность обратной совместимости. Мы будем продолжать расширять возможности более широкой экосистемы .NET и расширять ее роль в будущем C#, сохраняя при этом руководство по принятию решений по проектированию.
        </p>
        <a className={style.link} href="https://learn.microsoft.com/ru-ru/dotnet/csharp/tour-of-csharp/strategy">
        стратегия языка 
        </a>
       </div>
      </div>
    );
  }
  
  export default Auth;